---
title: Getting Started
engine: julia
aliases: 
   - ../../
---

```{julia}
#| echo: false
#| output: false
using Pkg;
Pkg.instantiate();
```

### Installation

To use Turing, you need to install Julia first and then install Turing.

You will need to install Julia 1.7 or greater, which you can get from [the official Julia website](http://julialang.org/downloads/).

Turing is officially registered in the [Julia General package registry](https://github.com/JuliaRegistries/General), which means that you can install a stable version of Turing by running the following in the Julia REPL:

```{julia}
#| eval: false
#| output: false
using Pkg
Pkg.add("Turing")
```

### Example usage

First, we load the Turing and StatsPlots modules.
The latter is required for visualising the results.

```{julia}
using Turing
using StatsPlots
```

We then specify our model, which is a simple Gaussian model with unknown mean and variance.
In mathematical notation, the model is defined as follows:

$$\begin{align}
s^2  &\sim \text{InverseGamma}(2, 3) \\
m    &\sim \mathcal{N}(0, \sqrt{s^2}) \\
x, y &\sim \mathcal{N}(m, s^2)
\end{align}$$

This translates directly into the following Turing model.
Here, both `x` and `y` are observed values, and should therefore be passed as function parameters.
`m` and `s²` are the parameters to be inferred.

```{julia}
@model function gdemo(x, y)
    s² ~ InverseGamma(2, 3)
    m ~ Normal(0, sqrt(s²))
    x ~ Normal(m, sqrt(s²))
    y ~ Normal(m, sqrt(s²))
end
```

Suppose we observe `x = 1.5` and `y = 2`, and want to infer the mean and variance.
We can pass these data as arguments to the `gdemo` function, and run a sampler to collect the results.
Here, we collect 1000 samples using the No U-Turn Sampler (NUTS) algorithm.

```{julia}
chain = sample(gdemo(1.5, 2), NUTS(), 1000, progress=false)
```

We can plot the results:

```{julia}
plot(chain)
```

and obtain summary statistics by indexing the chain:

```{julia}
mean(chain[:m]), mean(chain[:s²])
```
