---
title: Contributing
---

Turing is an open-source project. If you feel that you have relevant skills and are interested in contributing, please get in touch. You can contribute by opening issues on GitHub, implementing things yourself, and making a pull request. We would also appreciate example models written using Turing.

Turing has a [style guide]({{< meta site-url >}}docs/tutorials/docs-02-contributing-style-guide/). Reviewing it before making a pull request is not strictly necessary, but you may be asked to change portions of your code to conform with the style guide before it is merged.

### What Can I Do?

Look at the [issues](https://github.com/TuringLang/Turing.jl/issues) page for an outstanding issue. For instance, you could implement new features, fix bugs or write example models.

### Git Workflow

For more information on how the Git workflow typically functions, please see the [GitHub's introduction](https://guides.github.com/introduction/flow/) or [Julia's contribution guide](https://github.com/JuliaLang/julia/blob/master/CONTRIBUTING.md).


### Style Guide

Most Turing code follows the [Blue: a Style Guide for Julia](https://github.com/JuliaDiff/BlueStyle). These conventions were created from a variety of sources including Python's [PEP8](http://legacy.python.org/dev/peps/pep-0008/), Julia's [Notes for Contributors](https://github.com/JuliaLang/julia/blob/master/CONTRIBUTING.md), and Julia's [Style Guide](https://docs.julialang.org/en/v1/manual/style-guide/).

#### Synopsis

  - Use 4 spaces per indentation level, no tabs.
  - Try to adhere to a 92 character line length limit.
  - Use upper camel case convention for [modules](https://docs.julialang.org/en/v1/manual/modules/) and [types](https://docs.julialang.org/en/v1/manual/types/).
  - Use lower case with underscores for method names (note: Julia code likes to use lower case without underscores).
  - Comments are good, try to explain the intentions of the code.
  - Use whitespace to make the code more readable.
  - No whitespace at the end of a line (trailing whitespace).
  - Avoid padding brackets with spaces. ex. `Int64(value)` preferred over `Int64( value )`.

#### A Word on Consistency

When adhering to the Blue style, it's important to realize that these are guidelines, not rules. This is [stated best in the PEP8](http://legacy.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds):

> A style guide is about consistency. Consistency with this style guide is important. Consistency within a project is more important. Consistency within one module or function is most important.

> But most importantly: know when to be inconsistent â€“ sometimes the style guide just doesn't apply. When in doubt, use your best judgment. Look at other examples and decide what looks best. And don't hesitate to ask!

