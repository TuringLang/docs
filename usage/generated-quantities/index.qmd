---
title: Generated Quantities
engine: julia
aliases:
  - ../../tutorials/usage-generated-quantities/index.html
---

```{julia}
#| echo: false
#| output: false
using Pkg;
Pkg.instantiate();
```

Often, the most natural parameterization for a model is not the most computationally feasible.
Consider the following (efficiently reparametrized) implementation of Neal's funnel [(Neal, 2003)](https://arxiv.org/abs/physics/0009028):

```{julia}
using Turing

@model function Neal()
    # Raw draws
    y_raw ~ Normal(0, 1)
    x_raw ~ arraydist([Normal(0, 1) for i in 1:9])

    # Transform:
    y = 3 * y_raw
    x = exp.(y ./ 2) .* x_raw

    # Return:
    return [x; y]
end
```

In this case, the random variables exposed in the chain (`x_raw`, `y_raw`) are not in a helpful form — what we're after are the deterministically transformed variables `x` and `y`.

More generally, there are often quantities in our models that we might be interested in viewing, but which are not explicitly present in our chain.

We can generate draws from these variables — in this case, `x` and `y` — by adding them as a return statement to the model, and then calling `generated_quantities(model, chain)`. Calling this function outputs an array of values specified in the return statement of the model.

For example, in the above reparametrization, we sample from our model:

```{julia}
chain = sample(Neal(), NUTS(), 1000; progress=false)
```

Notice that only `x_raw` and `y_raw` are stored in the chain; `x` and `y` are not because they do not appear on the left-hand side of a tilde-statement.

To get `x` and `y`, we can then call:

```{julia}
generated_quantities(Neal(), chain)
```

Each element of this corresponds to an array with the values of `x1, x2, ..., x9, y` for each posterior sample.

In this case, it might be useful to reorganize our output into a matrix for plotting:

```{julia}
reparam_chain = reduce(hcat, generated_quantities(Neal(), chain))'
```

from which we can recover a vector of our samples:

```{julia}
x1_samples = reparam_chain[:, 1]
y_samples = reparam_chain[:, 10]
```
